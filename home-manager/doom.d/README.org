#+TITLE: Doom Emacs Configuration
#+AUTHOR: Martin Brignall

* Table of contents
- [[#configel][config.el]]
- [[#initel][init.el]]
- [[#packagesel][packages.el]]
- [[#customel][custom.el]]
- [[#formatting-and-styles][Formatting and Styles]]
- [[#exwm-whats-that-all-about][EXWM - What's that all about?]]

* Introduction

I recently started using [[https://github.com/hlissner/doom-emacs][Doom Emacs]], and I must say, it has been an absolute game-changer for me. Doom Emacs is a configuration framework for [[https://www.gnu.org/software/emacs/][GNU Emacs]], built with a focus on performance, usability, and aesthetics. It has dramatically improved my productivity and overall coding experience.

Switching to Doom Emacs has introduced me to an incredible range of powerful features and integrations with other tools that I use daily. Its thoughtful design and extensive customization options have made it an essential part of my workflow. The vibrant community behind Doom Emacs has also been incredibly supportive, and I am continually discovering new ways to enhance my Emacs experience.

I am genuinely grateful for the work put into Doom Emacs, and I am excited to continue exploring its capabilities. If you haven't tried it yet, I highly recommend giving it a go - it might just change the way you think about text editors and development environments!

This ~README.org~ file serves as the primary source of documentation for my Doom Emacs configuration. It contains detailed information about my setup, including the packages I use, the customizations I've made, and any tips or tricks that I've found helpful along the way.

* How to use

If you put the ~README.org~ inside ~.doom.d~ directory (or create your own ~README.org~ with your personal config) along with the following empty files:

- ~config.el~
- ~custom.el~
- ~init.el~
- ~packages.el~

You then only have to make edits to the ~README.org~ (or call it what you like .org) then use the following keybindings:

#+begin_src
C-c C-v t
#+end_src

It should sync by then running ~doom sync~.

** config.el

The ~config.el~ file is where you define your personal settings and configurations for Emacs and the various packages you use.

#+BEGIN_SRC elisp :tangle config.el
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

;; Place your private configuration here! Remember, you do not need to run 'doom
;; sync' after modifying this file!

;; User information
(setq user-full-name "mbrignall"
      user-mail-address "martin.brignall@ovo.com")

;; Font and theme configuration
(setq doom-theme 'doom-horizon)

;; Line number configuration
(setq display-line-numbers-type t)

;; Enable editorconfig-mode
(editorconfig-mode 1)

;; Set transparency
(set-frame-parameter nil 'alpha-background 80)

(add-to-list 'default-frame-alist '(alpha-background . 80))

;; Mouse configuration
(setq mouse-autoselect-window t
      focus-follows-mouse t)

(desktop-save-mode 1)

(defun open-vterm-bottom ()
  "Open a vterm buffer at the bottom of the window."
  (interactive)
  (split-window-below)
  (other-window 1)
  (vterm))

(add-hook 'emacs-startup-hook 'open-vterm-bottom)

(setq evil-insert-state-cursor '(bar "#00FF00")
      evil-visual-state-cursor '(box "#FF00FF")
      evil-normal-state-cursor '(box "#E2E8EF"))

;; Org directory configuration
(setq org-directory "~/org/")

;; Org-mode config

(add-hook 'org-mode-hook (lambda () (org-indent-mode t)))
(use-package! org-bullets
  :hook (org-mode . org-bullets-mode))
(add-hook 'org-mode-hook #'visual-line-mode)

(use-package! org-bullets
  :after org
  :hook (org-mode . org-bullets-mode)
  :init
  (setq org-bullets-bullet-list '("â¦¿" "âšª" "âš«" "â—Œ" "â—‹" "â–¡")))

;; Set up fonts
(setq doom-font (font-spec :family "Victor Mono" :size 14)
      doom-variable-pitch-font (font-spec :family "Victor Mono" :size 16))

(setq doom-unicode-font (font-spec :family "Victor Mono" :size 18))

(use-package ligature
  :config
  ;; Enable the "www" ligature in every possible major mode
  (ligature-set-ligatures 't '("www"))
  ;; Enable traditional ligature support in eww-mode, if the
  ;; `variable-pitch' face supports it
  (ligature-set-ligatures 'eww-mode '("ff" "fi" "ffi"))
  ;; Enable all Cascadia Code ligatures in programming modes
  (ligature-set-ligatures 'prog-mode '("|||>" "<|||" "<==>" "<!--" "####" "~~>" "***" "||=" "||>"
                                       ":::" "::=" "=:=" "===" "==>" "=!=" "=>>" "=<<" "=/=" "!=="
                                       "!!." ">=>" ">>=" ">>>" ">>-" ">->" "->>" "-->" "---" "-<<"
                                       "<~~" "<~>" "<*>" "<||" "<|>" "<$>" "<==" "<=>" "<=<" "<->"
                                       "<--" "<-<" "<<=" "<<-" "<<<" "<+>" "</>" "###" "#_(" "..<"
                                       "..." "+++" "/==" "///" "_|_" "www" "&&" "^=" "~~" "~@" "~="
                                       "~>" "~-" "**" "*>" "*/" "||" "|}" "|]" "|=" "|>" "|-" "{|"
                                       "[|" "]#" "::" ":=" ":>" ":<" "$>" "=$" "=>" ">>" ">>-" "-<"
                                       "-<<" "-<" "<<" "<~" "<*" "<|" "<$" "<=" "<>" "<-" "<<<" "<+"
                                       "</" "#{" "#[" "#:" "#=" "#!" "##" "#(" "#?" "#_" "%%" ".="
                                       ".-" ".." ".?" "+>" "++" "?:"))
  ;; Enables ligature checks globally in all buffers. You can also do it
  ;; per mode with `ligature-mode'.
  (global-ligature-mode t))

;; Enable variable-pitch-mode in org-mode
(add-hook 'org-mode-hook 'variable-pitch-mode)
(add-hook 'org-mode-hook 'org-indent-mode)

(defun my/org-export-to-pdf-via-html ()
  "Export the current Org file to PDF via HTML using WeasyPrint."
  (interactive)
  (let* ((basename (file-name-sans-extension (buffer-file-name)))
         (html-filename (concat basename ".html"))
         (pdf-filename (concat basename ".pdf")))
    ;; Export to HTML
    (org-html-export-to-html)
    ;; Convert HTML to PDF using WeasyPrint
    (shell-command (format "weasyprint %s %s" html-filename pdf-filename))
    ;; Delete the HTML file
    (delete-file html-filename)
    ;; Open the PDF
    (find-file pdf-filename)))

;; Org Ox reveal
(require 'ox-reveal)
(setq Org-Reveal-root "file:///home/mbrignall/reveal.js-master/js/reveal.js")
(setq Org-Reveal-title-slide nil)

;; Plantuml config

(setq plantuml-default-exec-mode 'executable)
(after! org
  (use-package! plantuml-mode
    :config
    (setq plantuml-default-exec-mode 'jar)
    (setq plantuml-jar-path "/home/mbrignall/.emacs.d/.local/etc/plantuml.jar"))
  (setq org-plantuml-jar-path plantuml-jar-path)
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((plantuml . t))))

;; Docker config basics
(use-package docker
  :bind ("C-c d" . docker))

;; Python config
(after! lsp-mode
  (require 'lsp-pyright)
  (add-hook 'python-mode-hook (lambda ()
                                (require 'lsp-pyright)
                                (lsp-deferred))))

;; Assume .astro files to be JSX
(setq auto-mode-alist
      (append '((".*\\.astro\\'" . js-jsx-mode))
              auto-mode-alist))

(require 'request)

#+END_SRC

** init.el
The ~init.el~ file is the main entry point for my Doom Emacs configuration.

It's responsible for setting up Doom's core features and loading the modules I've enabled in this file.

#+BEGIN_SRC elisp :tangle init.el
;;; init.el -*- lexical-binding: t; -*-

;; This file controls what Doom modules are enabled and what order they load
;; in. Remember to run 'doom sync' after modifying it!

;; NOTE Press 'SPC h d h' (or 'C-h d h' for non-vim users) to access Doom's
;;      documentation. There you'll find a link to Doom's Module Index where all
;;      of our modules are listed, including what flags they support.

;; NOTE Move your cursor over a module's name (or its flags) and press 'K' (or
;;      'C-c c k' for non-vim users) to view its documentation. This works on
;;      flags as well (those symbols that start with a plus).
;;
;;      Alternatively, press 'gd' (or 'C-c c d') on a module to browse its
;;      directory (for easy access to its source code).

(doom! :input
       ;;bidi              ; (tfel ot) thgir etirw uoy gnipleh
       ;;chinese
       ;;japanese
       ;;layout            ; auie,ctsrnm is the superior home row

       :completion
       (company +childframe)          ; the ultimate code completion backend
       ;;helm               ; the *other* search engine for love and life
       ;;ido               ; the other *other* search engine...
       ;;ivy               ; a search engine for love and life
       (vertico +icons)    ; the search engine of the future




       :ui
       ;;deft              ; notational velocity for Emacs
       doom              ; what makes DOOM look the way it does
       doom-dashboard    ; a nifty splash screen for Emacs
       doom-quit         ; DOOM quit-message prompts when you quit Emacs
       (emoji +unicode)  ; ðŸ™‚
       hl-todo           ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
       ;;hydra
       indent-guides     ; highlighted indent columns
       (ligatures +fira)         ; ligatures and symbols to make your code pretty again
       ;;minimap           ; show a map of the code on the side
       modeline          ; snazzy, Atom-inspired modeline, plus API
       ;;nav-flash         ; blink cursor line after big motions
       ;;neotree           ; a project drawer, like NERDTree for vim
       ophints           ; highlight the region an operation acts on
       (popup +defaults)   ; tame sudden yet inevitable temporary windows
       ;;tabs              ; a tab bar for Emacs
       treemacs          ; a project drawer, like neotree but cooler
       ;;unicode           ; extended unicode support for various languages
       (vc-gutter +pretty) ; vcs diff in the fringe
       vi-tilde-fringe   ; fringe tildes to mark beyond EOB
       window-select     ; visually switch windows
       ;;workspaces        ; tab emulation, persistence & separate workspaces
       ;;zen               ; distraction-free coding or writing

       :editor
       (evil +everywhere); come to the dark side, we have cookies
       file-templates    ; auto-snippets for empty files
       fold              ; (nigh) universal code folding
       (format +onsave)  ; automated prettiness
       ;;god               ; run Emacs commands without modifier keys
       ;;lispy             ; vim for lisp, for people who don't like vim
       ;;multiple-cursors  ; editing in many places at once
       ;;objed             ; text object editing for the innocent
       ;;parinfer          ; turn lisp into python, sort of
       ;;rotate-text       ; cycle region at point between text candidates
       snippets          ; my elves. They type so I don't have to
       word-wrap         ; soft wrapping with language-aware indent

       :emacs
       (dired +icons)             ; making dired pretty [functional]
       electric          ; smarter, keyword-based electric-indent
       ;;ibuffer         ; interactive buffer management
       (undo +tree)              ; persistent, smarter undo for your inevitable mistakes
       vc                ; version-control and Emacs, sitting in a tree

       :term
       eshell            ; the elisp shell that works everywhere
       ;;shell             ; simple shell REPL for Emacs
       ;;term              ; basic terminal emulator for Emacs
       vterm             ; the best terminal emulation in Emacs

       :checkers
       syntax              ; tasing you for every semicolon you forget
       (spell +flyspell) ; tasing you for misspelling mispelling
       grammar           ; tasing grammar mistake every you make

       :tools
       ;;ansible
       ;;biblio            ; Writes a PhD for you (citation needed)
       ;;debugger          ; FIXME stepping through code, to help you add bugs
       direnv
       (docker +lsp)
       editorconfig      ; let someone else argue about tabs vs spaces
       ein               ; tame Jupyter notebooks with emacs
       (eval +overlay)     ; run code, run (also, repls)
       ;;gist              ; interacting with github gists
       lookup              ; navigate your code and its documentation
       lsp               ; M-x vscode
       magit             ; a git porcelain for Emacs
       make              ; run make tasks from Emacs
       ;;pass              ; password manager for nerds
       pdf               ; pdf enhancements
       ;;prodigy           ; FIXME managing external services & code builders
       rgb               ; creating color strings
       ;;taskrunner        ; taskrunner for all your projects
       terraform         ; infrastructure as code
       ;;tmux              ; an API for interacting with tmux
       tree-sitter       ; syntax and parsing, sitting in a tree...
       ;;upload            ; map local to remote projects via ssh/ftp

       :os
       (:if IS-MAC macos)  ; improve compatibility with macOS
       (tty +osc)               ; improve the terminal Emacs experience

       :lang
       ;;agda              ; types of types of types of types...
       ;;beancount         ; mind the GAAP
       ;;(cc +lsp)         ; C > C++ == 1
       ;;clojure           ; java with a lisp
       ;;common-lisp       ; if you've seen one lisp, you've seen them all
       ;;coq               ; proofs-as-programs
       ;;crystal           ; ruby at the speed of c
       ;;csharp            ; unity, .NET, and mono shenanigans
       data              ; config/data formats
       ;;(dart +flutter)   ; paint ui and not much else
       ;;dhall
       ;;elixir            ; erlang done right
       ;;elm               ; care for a cup of TEA?
       emacs-lisp        ; drown in parentheses
       ;;erlang            ; an elegant language for a more civilized age
       ;;ess               ; emacs speaks statistics
       ;;factor
       ;;faust             ; dsp, but you get to keep your soul
       ;;fortran           ; in FORTRAN, GOD is REAL (unless declared INTEGER)
       ;;fsharp            ; ML stands for Microsoft's Language
       ;;fstar             ; (dependent) types and (monadic) effects and Z3
       ;;gdscript          ; the language you waited for
       ;;go         ; the hipster dialect
       ;;(graphql +lsp)    ; Give queries a REST
       ;;(haskell +lsp)    ; a language that's lazier than I am
       ;;hy                ; readability of scheme w/ speed of python
       ;;idris             ; a language you can depend on
       (json +lsp)              ; At least it ain't XML
       ;;(java +lsp)       ; the poster child for carpal tunnel syndrome
       (javascript +lsp)        ; all(hope(abandon(ye(who(enter(here))))))
       ;;julia             ; a better, faster MATLAB
       ;;kotlin            ; a better, slicker Java(Script)
       latex             ; writing papers in Emacs has never been so fun
       ;;lean              ; for folks with too much to prove
       ;;ledger            ; be audit you can be
       ;;lua               ; one-based indices? one-based indices
       (markdown +lsp +grip)         ; writing docs for people to ignore
       ;;nim               ; python + lisp at the speed of c
       (nix +lsp)               ; I hereby declare "nix geht mehr!"
       ;;ocaml             ; an objective camel
       (org
        +dragndrop
        +present
        +pandoc
        +hugo)               ; organize your plain life in plain text
       ;;php               ; perl's insecure younger brother
       (plantuml +lsp)          ; diagrams for confusing people more
       ;;purescript        ; javascript, but functional
       (python +lsp)            ; beautiful is better than ugly
       ;;qt                ; the 'cutest' gui framework ever
       ;;racket            ; a DSL for DSLs
       ;;raku              ; the artist formerly known as perl6
       ;;rest              ; Emacs as a REST client
       ;;rst               ; ReST in peace
       ;;(ruby +rails)     ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
       ;;(rust +lsp)       ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
       ;;scala             ; java, but good
       ;;(scheme +guile)   ; a fully conniving family of lisps
       (sh +lsp)                ; she sells {ba,z,fi}sh shells on the C xor
       ;;sml
       ;;solidity          ; do you need a blockchain? No.
       ;;swift             ; who asked for emoji variables?
       ;;terra             ; Earth and Moon in alignment for performance.
       (web +lsp)               ; the tubes
       yaml              ; JSON, but readable
       ;;zig               ; C, but simpler

       :email
       ;;(mu4e +org +gmail)
       ;;notmuch
       ;;(wanderlust +gmail)

       :app
       ;;calendar
       ;;emms
       ;;everywhere        ; *leave* Emacs!? You must be joking
       ;;irc               ; how neckbeards socialize
       ;;(rss +org)        ; emacs as an RSS reader
       ;;twitter           ; twitter client https://twitter.com/vnought

       :config
       ;;literate
       (default +bindings +smartparens))
#+END_SRC


** packages.el
The ~packages.el~ file is where I have defined additional packages to be installed and managed by Doom.

#+BEGIN_SRC elisp :tangle packages.el
;; -*- no-byte-compile: t; -*-
;;; private/my-packages/packages.el

(package! all-the-icons)
(package! all-the-icons-dired)
(package! all-the-icons-ivy)
(package! all-the-icons-ivy-rich)
(package! auctex)
(package! company-web)
(package! counsel)
(package! docker)
(package! docker-compose-mode)
(package! docker-tramp)
(package! esh-autosuggest)
(package! esh-help)
(package! eshell-did-you-mean)
(package! eshell-z)
(package! flymake-golangci)
(package! flymake-python-pyflakes)
(package! go-mode)
(package! go-projectile)
(package! helm-projectile)
(package! ivy-avy)
(package! ivy-rich)
(package! ivy-xref)
(package! ligature)
(package! lsp-mode)
(package! lsp-pyright)
(package! gptel)
(package! org-bullets)
(package! org-projectile)
(package! org-roam)
(package! org-re-reveal)
(package! ox-pandoc)
(package! ox-reveal)
(package! pandoc)
(package! pandoc-mode)
(package! plantuml-mode)
(package! flycheck-plantuml)
(package! projectile-git-autofetch)
(package! python-django)
(package! vterm)
(package! web-mode)
(package! webkit-color-picker)
#+END_SRC

** Custom.el

#+begin_src elisp :tangle custom.el
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(custom-safe-themes
   '("636b135e4b7c86ac41375da39ade929e2bd6439de8901f53f88fde7dd5ac3561" "f053f92735d6d238461da8512b9c071a5ce3b9d972501f7a5e6682a90bf29725" "9d29a302302cce971d988eb51bd17c1d2be6cd68305710446f658958c0640f68" "991ca4dbb23cab4f45c1463c187ac80de9e6a718edc8640003892a2523cb6259" "2e05569868dc11a52b08926b4c1a27da77580daa9321773d92822f7a639956ce" "b9761a2e568bee658e0ff723dd620d844172943eb5ec4053e2b199c59e0bcc22" "2dd4951e967990396142ec54d376cced3f135810b2b69920e77103e0bcedfba9" default))
 '(org-safe-remote-resources
   '("\\`https://fniessen\\.github\\.io/org-html-themes/org/theme-readtheorg\\.setup\\'"))
 '(package-selected-packages
   '(pandoc-mode pandoc ox-pandoc ox-reveal weather-metno request org-bullets flycheck-plantuml plantuml-mode lsp-pyright org-roam org-re-reveal lsp-python-ms helm-projectile flymake-python-pyflakes python-django company-web web-mode docker-compose-mode org2web webkit-color-picker projectile-git-autofetch go-projectile org-projectile all-the-icons-dired flymake-golangci go-mode auctex docker docker-tramp all-the-icons-ivy-rich all-the-icons-ivy all-the-icons ivy-xref ivy-avy counsel ivy-rich eshell-did-you-mean esh-autosuggest esh-help eshell-z)))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )

#+end_src

* Formatting and Styles
TODO Finish this at some point soon

* EXWM? What's that all about?

So for a bit I was experimenting with various desktop environments and [[https://github.com/ch11ng/exwm][EXWM]] came up as a suggestion.

#+begin_quote
It's a 'full-featured' tiling X window manager for Emacs built on top of [[https://github.com/ch11ng/xelb][XELB]]. It features:

- Fully keyboard-driven operations
- Hybrid layout modes (tiling & stacking)
- Dynamic workspace support
- ICCCM/EWMH compliance
- (Optional) RandR (multi-monitor) support
- (Optional) Builtin system tray
- (Optional) Builtin input method
#+end_quote

I kinda gave up on EXWM after discovering Sway - see my config files:

[[https://github.com/mbrignall/sway-dotfiles][mbrignall/sway-dotfiles]]
